// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`Client \`batch\` method > should merge payloads when more then max allowed commands provided 1`] = `
{
  "result": {
    "result": [
      "done1",
      "done2",
    ],
    "result_error": [],
    "result_next": [
      1,
      2,
    ],
    "result_time": [],
    "result_total": [
      2,
      2,
    ],
  },
  "time": {},
}
`;

exports[`Client \`batch\` method > should throw when getting errors in array of commands payload 1`] = `
[Error: [batch] failed to process. Received errors in 2 commands:
Expected error from array of command \`batch\` 0
Expected error from array of command \`batch\` 1]
`;

exports[`Client \`batch\` method > should throw when getting errors in numbered commands payload 1`] = `
[Error: [batch] failed to process. Received errors in 2 commands:
Expected error from numbered \`batch\` 0
Expected error from numbered \`batch\` 1]
`;

exports[`Client \`batch\` method > should throw when getting errors in payload 1`] = `
[Error: [batch] failed to process. Received errors in 2 commands:
Expected error from numbered \`batch\` one
Expected error from numbered \`batch\` two]
`;

exports[`Client \`chunkCommands\` method > should chunk array of commands 1`] = `
[
  [
    {
      "method": "crm.deal.get",
    },
    {
      "method": "crm.lead.get",
    },
  ],
  [
    {
      "method": "crm.deal.list",
    },
    {
      "method": "crm.lead.list",
    },
  ],
  [
    {
      "method": "crm.status.list",
    },
  ],
]
`;

exports[`Client \`chunkCommands\` method > should chunk named commands 1`] = `
[
  {
    "a": {
      "method": "crm.deal.get",
    },
    "b": {
      "method": "crm.lead.get",
    },
  },
  {
    "c": {
      "method": "crm.deal.list",
    },
    "d": {
      "method": "crm.lead.list",
    },
  },
  {
    "e": {
      "method": "crm.status.list",
    },
  },
]
`;

exports[`Client \`mergeBatchPayloads\` method > should merge array payloads 1`] = `
{
  "result": {
    "result": [
      [
        {
          "ID": "1",
        },
        {
          "ID": "2",
        },
      ],
      [
        {
          "ID": "3",
        },
        {
          "ID": "4",
        },
      ],
      [
        {
          "ID": "5",
        },
        {
          "ID": "6",
        },
      ],
      [
        {
          "ID": "7",
        },
        {
          "ID": "8",
        },
      ],
    ],
    "result_error": [],
    "result_next": [
      2,
      4,
      6,
      8,
    ],
    "result_time": [
      {
        "date_finish": "2019-08-30T23:28:11+03:00",
        "date_start": "2019-08-30T23:28:11+03:00",
        "duration": 0.014085054397583008,
        "finish": 1567196891.022234,
        "processing": 0.013998985290527344,
        "start": 1567196891.008149,
      },
      {
        "date_finish": "2019-08-30T23:28:11+03:00",
        "date_start": "2019-08-30T23:28:11+03:00",
        "duration": 0.009933948516845703,
        "finish": 1567196891.03225,
        "processing": 0.009846210479736328,
        "start": 1567196891.022316,
      },
      {
        "date_finish": "2019-08-30T23:28:11+03:00",
        "date_start": "2019-08-30T23:28:11+03:00",
        "duration": 0.002981901168823242,
        "finish": 1567196891.035297,
        "processing": 0.002897024154663086,
        "start": 1567196891.032315,
      },
      {
        "date_finish": "2019-08-30T23:28:11+03:00",
        "date_start": "2019-08-30T23:28:11+03:00",
        "duration": 0.004575967788696289,
        "finish": 1567196891.039936,
        "processing": 0.00450897216796875,
        "start": 1567196891.03536,
      },
    ],
    "result_total": [
      8,
      8,
      8,
      8,
    ],
  },
  "time": {
    "date_finish": "2019-08-30T23:28:13+03:00",
    "date_start": "2019-08-30T23:28:12+03:00",
    "duration": 0.2647218704223683,
    "finish": 1567196891.225739,
    "processing": 0.21567082405090832,
    "start": 1567196890.959517,
  },
}
`;

exports[`Client \`mergeBatchPayloads\` method > should merge named payloads 1`] = `
{
  "result": {
    "result": {
      "a": [
        {
          "ID": "1",
        },
        {
          "ID": "2",
        },
      ],
      "b": [
        {
          "ID": "3",
        },
        {
          "ID": "4",
        },
      ],
      "c": [
        {
          "ID": "5",
        },
        {
          "ID": "6",
        },
      ],
      "d": [
        {
          "ID": "7",
        },
        {
          "ID": "8",
        },
      ],
    },
    "result_error": [],
    "result_next": {
      "a": 2,
      "b": 4,
      "c": 6,
      "d": 8,
    },
    "result_time": {
      "a": {
        "date_finish": "2019-08-30T23:28:11+03:00",
        "date_start": "2019-08-30T23:28:11+03:00",
        "duration": 0.014085054397583008,
        "finish": 1567196891.022234,
        "processing": 0.013998985290527344,
        "start": 1567196891.008149,
      },
      "b": {
        "date_finish": "2019-08-30T23:28:11+03:00",
        "date_start": "2019-08-30T23:28:11+03:00",
        "duration": 0.009933948516845703,
        "finish": 1567196891.03225,
        "processing": 0.009846210479736328,
        "start": 1567196891.022316,
      },
      "c": {
        "date_finish": "2019-08-30T23:28:11+03:00",
        "date_start": "2019-08-30T23:28:11+03:00",
        "duration": 0.002981901168823242,
        "finish": 1567196891.035297,
        "processing": 0.002897024154663086,
        "start": 1567196891.032315,
      },
      "d": {
        "date_finish": "2019-08-30T23:28:11+03:00",
        "date_start": "2019-08-30T23:28:11+03:00",
        "duration": 0.004575967788696289,
        "finish": 1567196891.039936,
        "processing": 0.00450897216796875,
        "start": 1567196891.03536,
      },
    },
    "result_total": {
      "a": 8,
      "b": 8,
      "c": 8,
      "d": 8,
    },
  },
  "time": {
    "date_finish": "2019-08-30T23:28:13+03:00",
    "date_start": "2019-08-30T23:28:12+03:00",
    "duration": 0.2647218704223683,
    "finish": 1567196891.225739,
    "processing": 0.21567082405090832,
    "start": 1567196890.959517,
  },
}
`;

exports[`Client \`prepareCommandsQueries\` method > should return empty query object when no commands provided 1`] = `{}`;

exports[`Client \`prepareCommandsQueries\` method > should transform dict of the commands into the query object 1`] = `
{
  "cmd[one]": "crm.deal.get?ID=11111",
  "cmd[two]": "crm.deal.list?filter%5B%3EPROBABILITY%5D=50&order%5BSTAGE_ID%5D=ASC&select%5B0%5D=ID&select%5B1%5D=TITLE&start=200",
}
`;

exports[`Client \`prepareCommandsQueries\` method > should work with array of commands 1`] = `
{
  "cmd[0]": "crm.deal.get",
  "cmd[1]": "crm.deal.list",
}
`;

exports[`Client \`prepareCommandsQueries\` method > should work with numbered commands 1`] = `
{
  "cmd[0]": "crm.deal.get",
  "cmd[1]": "crm.deal.list",
}
`;
